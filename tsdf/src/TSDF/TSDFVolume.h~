// reviewed by hwb, 3.3.2016
// 
#ifndef TSDF_VOLUME_H_
#define TSDF_VOLUME_H_

#include "../Cuda/containers/device_array.hpp"
#include "../Cuda/internal.h"
#include <Eigen/Core>
#include <vector>
#include <vector_types.h>
#include <pcl/point_cloud.h>
#include <pcl/point_types.h>

/** \brief TsdfVolume class
  * \author Anatoly Baskeheev, Itseez Ltd, (myname.mysurname@mycompany.com)
  */
class TsdfVolume
{
public:
  /** \brief Default buffer size for fetching cloud. It limits max number of points that can be extracted */
  enum { DEFAULT_CLOUD_BUFFER_SIZE = 10 * 1000 * 1000 }; 

  /** \brief Constructor 
    * \param[in] resolution volume resolution 
    */
  // TsdfVolume(const Eigen::Vector3i& resolution); 

  TsdfVolume(const Eigen::Vector3i& resolution, const Eigen::Vector3f& volumeSize);

  /** \brief Sets Tsdf volume size for each dimention 
    * \param[in] size size of tsdf volume in meters 
    */ 
  void setSize(const Eigen::Vector3f& size); 

  /** \brief Sets Tsdf truncation distance. Must be greater than 2 * volume_voxel_size 
    * \param[in] distance TSDF truncation distance 
    */ 
  void setTsdfTruncDist (float distance); 

  /** \brief Returns tsdf volume container that point to data in GPU memroy */
  DeviceArray2D<short> data() const;

  /** \brief Returns volume size in meters */
  const Eigen::Vector3f& getSize() const;

  /** \brief Returns volume resolution */
  const Eigen::Vector3i& getResolution() const;

  /** \brief Returns volume voxel size in meters */
  const Eigen::Vector3f getVoxelSize() const;

  const float3 getVoxelSize();

  /** \brief Returns tsdf truncation distance in meters */
  float getTsdfTruncDist () const;

  /** \brief Resets tsdf volume data to uninitialized state */
  void reset();

  /** \brief Generates cloud using GPU in connected6 mode only
    * \param[out] cloud_buffer buffer to store point cloud
    * \return DeviceArray with disabled reference counting that points to filled part of cloud_buffer.
    */
  // // convert tsdf volume stocked in volume_ and color information stocked in color_volume to a point cloud buffer
  // all data in gpu device
  DeviceArray<pcl::PointXYZRGB> fetchCloud(DeviceArray<pcl::PointXYZRGB>& cloud_buffer,
                                      int3 & voxelWrap,
                                      PtrStep<uchar4> color_volume,
                                      int minX,
                                      int maxX,
                                      int minY,
                                      int maxY,
                                      int minZ,
                                      int maxZ,
                                      int3 realVoxelWrap,
                                      int subsample = 1) const;

  /** \brief Downloads tsdf volume from GPU memory.
    * \param[out] tsdf Array with tsdf values. if volume resolution is 512x512x512, so for voxel (x,y,z) tsdf value can be retrieved as volume[512*512*z + 512*y + x];
    */
  void downloadTsdf (std::vector<float>& tsdf) const;

  /** \brief Downloads TSDF volume and according voxel weights from GPU memory
    * \param[out] tsdf Array with tsdf values. if volume resolution is 512x512x512, so for voxel (x,y,z) tsdf value can be retrieved as volume[512*512*z + 512*y + x];
    * \param[out] weights Array with tsdf voxel weights. Same size and access index as for tsdf. A weight of 0 indicates the voxel was never used.
    */
  void downloadTsdfAndWeighs(std::vector<float>& tsdf, std::vector<short>& weights) const;

  void saveTsdfToDisk(std::string filename) const;

private:
  /** \brief tsdf volume size in meters */
  Eigen::Vector3f size_;

  /** \brief tsdf volume resolution */
  Eigen::Vector3i resolution_;

  /** \brief tsdf volume data container */
  DeviceArray2D<short> volume_;

  /** \brief tsdf truncation distance */
  float tranc_dist_;
};

#endif /* TSDF_VOLUME_H_ */
